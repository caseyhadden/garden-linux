// This file was generated by counterfeiter
package fake_rlimits_env_encoder

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/garden-linux/container_daemon"
)

type FakeRlimitsEnvEncoder struct {
	EncodeEnvStub        func(garden.ResourceLimits) []string
	encodeEnvMutex       sync.RWMutex
	encodeEnvArgsForCall []struct {
		arg1 garden.ResourceLimits
	}
	encodeEnvReturns struct {
		result1 []string
	}
}

func (fake *FakeRlimitsEnvEncoder) EncodeEnv(arg1 garden.ResourceLimits) []string {
	fake.encodeEnvMutex.Lock()
	fake.encodeEnvArgsForCall = append(fake.encodeEnvArgsForCall, struct {
		arg1 garden.ResourceLimits
	}{arg1})
	fake.encodeEnvMutex.Unlock()
	if fake.EncodeEnvStub != nil {
		return fake.EncodeEnvStub(arg1)
	} else {
		return fake.encodeEnvReturns.result1
	}
}

func (fake *FakeRlimitsEnvEncoder) EncodeEnvCallCount() int {
	fake.encodeEnvMutex.RLock()
	defer fake.encodeEnvMutex.RUnlock()
	return len(fake.encodeEnvArgsForCall)
}

func (fake *FakeRlimitsEnvEncoder) EncodeEnvArgsForCall(i int) garden.ResourceLimits {
	fake.encodeEnvMutex.RLock()
	defer fake.encodeEnvMutex.RUnlock()
	return fake.encodeEnvArgsForCall[i].arg1
}

func (fake *FakeRlimitsEnvEncoder) EncodeEnvReturns(result1 []string) {
	fake.EncodeEnvStub = nil
	fake.encodeEnvReturns = struct {
		result1 []string
	}{result1}
}

var _ container_daemon.RlimitsEnvEncoder = new(FakeRlimitsEnvEncoder)
